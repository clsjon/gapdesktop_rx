<?xml version='1.0' encoding='UTF-8'?>
<s:WindowedApplication 
	xmlns:lib="assets.graphics.Desktop_mockup_091104_copy.*" 
	xmlns:ATE="http://ns.adobe.com/ate/2009" 
	xmlns:ai="http://ns.adobe.com/ai/2009" 
	xmlns:fc="http://ns.adobe.com/flashcatalyst/2009" 
	xmlns:d="http://ns.adobe.com/fxg/2008/dt" 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:flm="http://ns.adobe.com/flame/2008" 
	xmlns:components="gapdesktoprx.components.catalyst.*" 
	xmlns:main="gapdesktoprx.components.main.*"
	xmlns:containers="flexlib.containers.*"
	xmlns:local="*" 
	xmlns:mx="library://ns.adobe.com/flex/halo"
	xmlns:ws="http://websector.de"
	
	backgroundColor="#ffffff" 
	
	height="800" 
	width="800" 
	minHeight="700"
	minWidth="400"
	
	preinitialize="windowedapplication1_preinitializeHandler(event)"
	applicationComplete="windowedapplication1_applicationCompleteHandler(event)" 
	xmlns:ns="library://ns.adobe.com/flex/mx">
	<fx:Style source="/assets/css/styles.css"/>
	<fx:Script><![CDATA[
		import flash.events.FullScreenEvent;
		import flash.events.MouseEvent;
		
		import flashx.textLayout.conversion.TextConverter;
		
		import gapdesktoprx.components.main.*;
		import gapdesktoprx.controllers.ApplicationController;
		import gapdesktoprx.events.ExampleChangeEvent;
		import gapdesktoprx.events.ExampleRolloutEvent;
		import gapdesktoprx.events.ExampleRolloverEvent;
		import gapdesktoprx.models.Example;
		
		import mx.events.FlexEvent;
		import mx.managers.PopUpManager;
		
		import org.restfulx.Rx;
		import org.restfulx.services.air.AIRServiceProvider;
		import org.restfulx.utils.RxUtils;
		
		import spark.events.IndexChangeEvent;
		
		
		[Bindable]
		private var example:Example = new Example();
		
		
		protected function button_clickHandler():void
		{
			currentState='SettingsState';
		}
		
		
		protected function closeSettingsButton_clickHandler():void
		{
			currentState='MainState';
		}
		
		
		protected function tosbutton_clickHandler():void
		{
			currentState='TosState';
		}
		
		
		
		protected function admin_clickHandler(event:MouseEvent):void {
			var gdrx:GapdesktopRx;
			gdrx = new GapdesktopRx;
			gdrx.open();
		}
		
		
		
		
		protected function list1_clickHandler(event:MouseEvent):void
		{
			trace(event.toString());
			currentState='TlzState';
		}
		
		
		
		/* 		protected function traceState(event:StateChangeEvent):void {
		if (event.newState=='TlzState') {
		this.nativeWindow.x=0;
		this.nativeWindow.y=0;
		}
		trace("New state: " + event.newState);	
		}
		*/		
		protected function fullScreenStateChange(event:FullScreenEvent):void {
			if (event.fullScreen) {
				fullScreenButton.label = "Exit full screen";
			}
			else {
				fullScreenButton.label = "Full screen";
			}
		}
		
		
		//		protected function windowedapplication1_initializeHandler(event:FlexEvent):void
		//		{
		//			this.addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE,traceState);
		//		}
		
		
		protected function windowedapplication1_preinitializeHandler(event:FlexEvent):void
		{
			ApplicationController.initialize([AIRServiceProvider], 
				AIRServiceProvider.ID, File.applicationStorageDirectory.resolvePath("gapdesktoprx").nativePath);
			
		}
		
		
		protected function exampleList_changeHandler(event:IndexChangeEvent):void
		{
			
			var viewer:GraphViewer = new GraphViewer();
			viewer.example = RxUtils.clone(event.currentTarget.selectedItem) as Example;
			
			
			currentState = 'TlzState';
			navigator.addChild(viewer);
			
			navigator.selectedChild = viewer;
			trace('app:/assets/graphs/' + viewer.example.graph.shortName + "/index.html#" + viewer.example.hash);
			viewer.graphHTML.location = 'app:/assets/graphs/' + viewer.example.graph.shortName + "/index.html#" + viewer.example.hash;
			
			
			//trace ("Selected item: " + event.currentTarget.selectedItems);
		}
		
		
		protected function fullScreenButton_clickHandler(event:MouseEvent):void
		{
			switch (stage.displayState) {
				case StageDisplayState.FULL_SCREEN:
				case StageDisplayState.FULL_SCREEN_INTERACTIVE:
					stage.displayState = StageDisplayState.NORMAL;
					break;
				case StageDisplayState.NORMAL:
					stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
					break;
			}
		}
		
		
		
		
		protected function windowedapplication1_applicationCompleteHandler(event:FlexEvent):void
		{
			stage.addEventListener(FullScreenEvent.FULL_SCREEN,fullScreenStateChange);
			this.addEventListener(ExampleChangeEvent.EXAMPLE_CHANGED,exampleChangedEventHandler);
			this.addEventListener(ExampleRolloverEvent.EXAMPLE_ROLLOVER,exampleRolloverEventHandler);
			this.addEventListener(ExampleRolloutEvent.EXAMPLE_ROLLOUT,exampleRolloutEventHandler);
		}
		
		private function exampleChangedEventHandler(event:ExampleChangeEvent):void {
			this.example = event.example;
		}
		
		private function exampleRolloverEventHandler(event:ExampleRolloverEvent):void {
			
			currentState="TooltipState";
			exampleDesc.textFlow = TextConverter.importToFlow( event.example.content,TextConverter.TEXT_FIELD_HTML_FORMAT);
			exampleName.textFlow = TextConverter.importToFlow(event.example.name,TextConverter.PLAIN_TEXT_FORMAT);
		}
			
		
		private function exampleRolloutEventHandler(event:ExampleRolloutEvent):void {
			currentState="MainState";	
			exampleDesc.textFlow = null;
			exampleName.textFlow = null;
		}
		
		
		
		
		private function launchExamplesList():void {
			var win:ExampleSelectionBox = PopUpManager.createPopUp(this,ExampleSelectionBox,true) as ExampleSelectionBox;
			PopUpManager.centerPopUp(win);
		}
	]]></fx:Script>
	<s:states>
		<s:State name="MainState"/>
		<s:State name="SettingsState"/>
		<s:State name="TooltipState"/>
		<s:State name="TosState"/>
		<s:State name="TlzState"/>
		<s:State name="ListLightBoxState"/>
	</s:states>
	
	
	<s:Group id="tlzgroup" x="0" y="0" width="100%" height="100%" includeIn="TlzState,ListLightBoxState" alpha.ListLightBoxState="0.2">
		<s:layout>
			<s:VerticalLayout/>
		</s:layout>
		<s:Group id="tlzbuttonrow">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			
			<s:Button skinClass="gapdesktoprx.components.catalyst.MainButton" click="currentState='ListLightBoxState'" label="Open examples" width="200"/>
			
			<s:Button skinClass="gapdesktoprx.components.catalyst.MainButton" click="this.example.create()" label="Bookmark this graph" width="200"/>
			<s:Button id="fullScreenButton" skinClass="gapdesktoprx.components.catalyst.MainButton" label="Full screen" width="200" click="fullScreenButton_clickHandler(event)"/>
			<s:Button skinClass="gapdesktoprx.components.catalyst.MainButton" click="launchExamplesList()" label="Home" width="100"/>
			
		</s:Group>
		
		<containers:SuperTabNavigator id="navigator" x="0" y="0" width="100%" height="100%" creationPolicy="all" fontFamily="Avenir LT Std 35 Light" editableTabLabels="true" popUpButtonPolicy="off"/>
	</s:Group>
	<s:Group id="maingroup" x="0" y="0" width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout gap="10"/>
		</s:layout>
		
		<s:Group id="headinggroup" excludeFrom="TlzState">
			<s:Rect height="74" d:id="12" width="100%" x="0" y="0">
				<s:fill>
					<s:LinearGradient rotation="270" scaleX="74" x="327.5" y="74">
						<s:GradientEntry color="0xD9D9D9" flm:midpoint="0.208790988922119" ratio="0"/>
						<s:GradientEntry color="0xEFEFEF" flm:midpoint="0.694443969726563" ratio="0.564417"/>
						<s:GradientEntry color="0xEEEEEE" ratio="1"/>
					</s:LinearGradient>
				</s:fill>
			</s:Rect>
			<s:Line x="0" xTo="{this.width}" y="74.5">
				<s:stroke>
					<s:SolidColorStroke caps="none" color="0x6C6C6C" joints="miter" miterLimit="4" scaleMode="normal" weight="1"/>
				</s:stroke>
			</s:Line>
			<s:RichText color="#000000" fontSize="36" kerning="on" textAlign="center" d:userLabel="Gapminder Desktop" whiteSpaceCollapse="preserve" left="0" right="0" x="0" y="14">
				<s:content><s:p><s:span fontFamily="Avenir LT Std 95 Black">Gapminder </s:span><s:span fontFamily="Avenir LT Std 35 Light">Desktop</s:span></s:p></s:content>
			</s:RichText>
			<s:RichText color="0x000000" fontFamily="Avenir LT Std 35 Light" fontSize="14" height="20" d:id="17" kerning="on" lineHeight="120%" ai:objID="615bb220" textAlign="center" d:userLabel="No internet required" whiteSpaceCollapse="preserve" width="{this.width}" x="0" y="49">
				<s:content><s:p d:id="18" whiteSpaceCollapse="collapse"><s:span d:id="19">No internet required</s:span></s:p></s:content>
			</s:RichText>
			<s:RichText color="#000000" fontFamily="Avenir LT Std 45 Book" fontSize="10" height="10" text="Updated 02/04/2010 (v 1.0b2)" textAlign="right" whiteSpaceCollapse="preserve" width="{this.width/3}" x="{this.width*(2/3)-5}" y="60"/>
			
		</s:Group>
		
		<s:Group id="menugroup" width="100%">	
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			<s:Group id="bigbuttoncolumn" width="50%">
				<s:Group id="bigbuttongroup" includeIn="ListLightBoxState,MainState,TooltipState">
					<s:Button alpha.TooltipState="0.4" id="splashButton" skinClass="gapdesktoprx.components.catalyst.SplashButton"/>		
				</s:Group>
			</s:Group>
			<s:Line alpha.TooltipState="0.4" id="line1" height="100%">
				<s:stroke>
					<s:SolidColorStroke caps="none" color="0x6C6C6C" joints="miter" miterLimit="4" scaleMode="normal" weight="1"/>
				</s:stroke>
			</s:Line>
			<s:Group id="examplescolumn" width="50%" excludeFrom="SettingsState,TosState,TlzState">
				<s:layout><s:VerticalLayout/></s:layout>
				<s:Group id="introtextgroup" excludeFrom="SettingsState,TosState,TlzState">
					<s:RichText alpha.TooltipState="0.4" color="0x000000" fontFamily="Avenir LT Std 65 Medium" fontSize="17" height="40" id="richtext2" kerning="on" lineHeight="120%" whiteSpaceCollapse="preserve" width="100%">
						<s:content><s:p d:id="48" whiteSpaceCollapse="collapse"><s:span d:id="49">â€¦or go directly to a graph on:</s:span></s:p></s:content>
					</s:RichText>
					
				</s:Group>
				<s:List id="exampleList" skinClass="gapdesktoprx.components.catalyst.ExampleList" dataProvider="{Rx.models.index(Example)}" change="exampleList_changeHandler(event)" width="100%"/>
				
			</s:Group>
		</s:Group>
		
		<s:Group id="tosgroup" includeIn="TosState">
			<s:RichText color="#000000" fontFamily="Avenir LT Std 85 Heavy" fontSize="16" height="13" id="richtext6" includeIn="TosState" tabStops="S0 S50 S100 S150 S200 S250 S300 S350 S400" tabStops.TosState="S0 S50 S100 S150 S200 S250 S300 S350" text="Settings" text.TosState="Terms of use for Gapminder Desktop and the Gapminder website" width="313" width.TosState="604" x="23" y="89"/>
			<s:SkinnableContainer id="skinnablecontainer1" skinClass="gapdesktoprx.components.catalyst.ScrollPanel2" x="22" y="120"/>
			<s:Button id="closeTosButton" click="closeSettingsButton_clickHandler()" label="Close" skinClass="gapdesktoprx.components.catalyst.Button3" x="24" y="465"/>
			
		</s:Group>
		<s:Group id="settingsgroup" includeIn="SettingsState">
			<s:CheckBox id="checkbox2" label="Check for updates automatically" skinClass="gapdesktoprx.components.catalyst.Checkbox1" x="26" y="114"/>
			<s:Button id="button2" label="Check for updates nowâ€¦" skinClass="gapdesktoprx.components.catalyst.Button3" x="26" y="143"/>
			<s:Button id="button0" label="Restore default graphsâ€¦" skinClass="gapdesktoprx.components.catalyst.Button3" x="25" y="186"/>
			<s:Button id="closeSettingsButton" click="closeSettingsButton_clickHandler()" label="Close settings" label.TosState="Close" skinClass="gapdesktoprx.components.catalyst.Button3" x="26" y="232"/>
		</s:Group>
		<s:Group id="updatenotificationgroup">
			<s:layout>
				<s:HorizontalLayout/>
			</s:layout>
			
			<!--			<ws:ApplicationUpdaterUI
			id="updater" 
			width="100%" 
			height="50"
			configurationFile="{File.applicationDirectory.resolvePath('flex/config/updaterConfig.xml')}"
			skinClass="de.websector.utils.updater.ui.skins.firefox.AppUpdaterUIFirefoxSkin"
			invisibleCheck="false"
			useWindow="false"
			
			/>
		-->		</s:Group>
		
		<s:Group id="settingsbuttonsgroup" excludeFrom="SettingsState,TosState,TlzState">
			<s:layout><s:HorizontalLayout/></s:layout>
			<s:Button id="adminButton" click="admin_clickHandler(event)" skinClass="gapdesktoprx.components.catalyst.Settings_Button" visible="true" label="Admin"/>
			<s:Button id="settingsbutton" click="button_clickHandler()" skinClass="gapdesktoprx.components.catalyst.Settings_Button"/>
			<s:Button id="tosbutton" click="tosbutton_clickHandler()" skinClass="gapdesktoprx.components.catalyst.Termsofuse_Button"/>
		</s:Group>
		
	</s:Group>
	
	<s:Group id="tooltip" includeIn="TooltipState" x="100" top="10" width="255" bottom="10">
		<s:layout><s:BasicLayout/></s:layout>
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:LinearGradient x="178.5" y="374.803" scaleX="374.302" rotation="-90">
					<s:GradientEntry color="#f3f3f3" ratio="0"/>
					<s:GradientEntry color="#ffffff" ratio="0.564417"/>
					<s:GradientEntry color="#f3f3f3" ratio="1"/>
				</s:LinearGradient>
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="#FFFFFF" weight="2" miterLimit="128" alpha="0.5"/>
				
				
			</s:stroke>
			<s:filters>
				<s:DropShadowFilter alpha="0.75" blurX="10" blurY="10" distance="10" quality="3"/>
			</s:filters>
		</s:Rect>
		<s:RichText id="exampleName" top="10" left="15" height="20" right="15" fontFamily="Avenir LT Std 95 Black" kerning="on" fontSize="14" textAlign="left"/>
		<s:Line left="15" right="15" y="25">
			<s:stroke>
				<s:SolidColorStroke color="#888888" weight="1"/>
			</s:stroke>
		</s:Line>
		<s:RichText id="exampleDesc" top="30" left="15" bottom="15" right="15" fontFamily="Avenir LT Std 45 Book" kerning="on" fontSize="14" textAlign="justify" textAlignLast="justify"/>
	</s:Group>		

	
	<s:transitions>
		<s:Transition autoReverse="true" fromState="MainState" toState="TooltipState">
			<s:Parallel>
				<s:Parallel target="{richtext2}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{line1}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{splashButton}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{tooltip}">
					<s:Fade duration="500"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="TooltipState" toState="MainState">
			<s:Parallel>
				<s:Parallel target="{splashButton}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{richtext2}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{line1}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{tooltip}">
					<s:Fade duration="500"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="MainState" toState="TosState">
			<s:Parallel>
				<s:Parallel target="{bigbuttongroup}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{richtext6}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{closeSettingsButton}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{skinnablecontainer1}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{examplescolumn}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{settingsbuttonsgroup}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{introtextgroup}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{splashButton}">
					<s:Fade alphaTo="0" d:noAutoDelete="true">
						<s:easer>
							<s:Linear easeInFraction="0.25" easeOutFraction="0.25"/>
						</s:easer>
					</s:Fade>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="TosState" toState="MainState">
			<s:Parallel>
				<s:Parallel target="{bigbuttongroup}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{richtext6}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{closeSettingsButton}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{skinnablecontainer1}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{examplescolumn}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{settingsbuttonsgroup}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{introtextgroup}">
					<s:Fade duration="500"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="SettingsState" toState="MainState">
			<s:Parallel>
				<s:Parallel target="{bigbuttongroup}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{richtext6}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{checkbox2}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{button2}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{button0}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{closeSettingsButton}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{examplescolumn}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{settingsbuttonsgroup}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{introtextgroup}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{updatenotificationgroup}">
					<s:Fade duration="0"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition fromState="TosState" toState="TooltipState" autoReverse="true">
			<s:Parallel>
				<s:Parallel target="{bigbuttongroup}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{skinnablecontainer1}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{richtext6}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{closeSettingsButton}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{examplescolumn}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{updatenotificationgroup}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{settingsbuttonsgroup}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{introtextgroup}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{tooltip}">
					<s:Fade duration="0"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
	</s:transitions>
</s:WindowedApplication>
