<?xml version='1.0' encoding='UTF-8'?>
<s:WindowedApplication
	xmlns:lib="assets.graphics.Desktop_mockup_091104_copy.*" 
	xmlns:ATE="http://ns.adobe.com/ate/2009" 
	xmlns:ai="http://ns.adobe.com/ai/2009" 
	xmlns:fc="http://ns.adobe.com/flashcatalyst/2009" 
	xmlns:d="http://ns.adobe.com/fxg/2008/dt" 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:s="library://ns.adobe.com/flex/spark" 
	xmlns:flm="http://ns.adobe.com/flame/2008" 
	xmlns:components="gapdesktoprx.components.catalyst.*" 
	xmlns:main="gapdesktoprx.components.main.*"
	xmlns:containers="flexlib.containers.*"
	xmlns:local="*" 
	xmlns:mx="library://ns.adobe.com/flex/halo"
	xmlns:ws="http://websector.de"
	
	backgroundColor="#ffffff" 
	
	height="420" 
	width="700" 
	
	resizing="windowedapplication1_resizingHandler(event)"
	preinitialize="windowedapplication1_preinitializeHandler(event)"
	applicationComplete="windowedapplication1_applicationCompleteHandler(event)"
	networkChange="windowedapplication1_networkChangeHandler(event)"
	xmlns:ns="library://ns.adobe.com/flex/mx" 
	xmlns:extensions="gapdesktoprx.components.extensions.*"
	currentStateChange="windowedapplication1_currentStateChangeHandler(event)" 
	currentStateChanging="windowedapplication1_currentStateChangingHandler(event)"
	>
	
	<fx:Style source="/assets/css/styles.css"/>
	
	<fx:Script><![CDATA[
		import air.net.URLMonitor;
		import air.update.events.UpdateEvent;
		
		import de.websector.utils.updater.ui.ApplicationUpdaterUI;
		
		import flash.display.DisplayObject;
		import flash.display.StageDisplayState;
		import flash.events.FullScreenEvent;
		import flash.events.MouseEvent;
		import flash.events.NativeWindowBoundsEvent;
		import flash.sampler.NewObjectSample;
		
		import flashx.textLayout.conversion.TextConverter;
		
		import flexlib.controls.SuperTabBar;
		import flexlib.controls.tabBarClasses.SuperTab;
		import flexlib.events.TabReorderEvent;
		
		import gapdesktoprx.components.main.*;
		import gapdesktoprx.controllers.ApplicationController;
		import gapdesktoprx.controllers.ModelsController;
		import gapdesktoprx.events.ExampleRolloutEvent;
		import gapdesktoprx.events.ExampleRolloverEvent;
		import gapdesktoprx.events.ExampleSelectEvent;
		import gapdesktoprx.events.NameExampleEvent;
		import gapdesktoprx.models.Graph;
		import gapdesktoprx.skins.ButtonSkin;
		import gapdesktoprx.skins.applicationupdaterui.firefox.AppUpdaterUIGapminderSkin;
		import gapdesktoprx.skins.applicationupdaterui.firefox.ButtonSkin;
		
		import mx.controls.SWFLoader;
		import mx.core.FlexGlobals;
		import mx.core.UIComponent;
		import mx.events.CloseEvent;
		import mx.events.DragEvent;
		import mx.events.FlexEvent;
		import mx.events.IndexChangedEvent;
		import mx.events.StateChangeEvent;
		import mx.graphics.ImageSnapshot;
		import mx.managers.PopUpManager;
		import mx.states.State;
		import mx.utils.ObjectUtil;
		
		import org.restfulx.Rx;
		import org.restfulx.events.CacheUpdateEvent;
		import org.restfulx.services.air.AIRServiceProvider;
		
		private var fixedSizeRect:Rectangle = new Rectangle();
		
		private var resizableRect:Rectangle = new Rectangle();
		private var resizableDisplayState:String = StageDisplayState.NORMAL;
		
		private var updater:ApplicationUpdaterUI;
		
		[Bindable]
		public static var online:Boolean = true;
		
		protected function closeSettingsButton_clickHandler():void
		{
			currentState='MainState';
		}
		
		
		protected function list1_clickHandler(event:MouseEvent):void
		{
			currentState='TlzState';
		}
		
		
		
		/* 		protected function traceState(event:StateChangeEvent):void {
		if (event.newState=='TlzState') {
		this.nativeWindow.x=0;
		this.nativeWindow.y=0;
		}
		trace("New state: " + event.newState);	
		}
		*/		
		protected function fullScreenStateChange(event:FullScreenEvent):void {
			if (event.fullScreen) {
				fullScreenButton.label = "Exit full screen";
				fullScreenButton.setStyle("iconUp", "assets/icons/button/fullscreen_exit.png");
			}
			else {
				fullScreenButton.label = "Full screen";
				fullScreenButton.setStyle("iconUp", "assets/icons/button/fullscreen.png");
			}
		}
		
		protected function windowedapplication1_preinitializeHandler(event:FlexEvent):void
		{
			var descriptor:XML = FlexGlobals.topLevelApplication.nativeApplication.applicationDescriptor;
			var ns:Namespace = descriptor.namespaceDeclarations()[0];
			var version:String = descriptor.ns::version;
			trace ('version: ' + version);
			ApplicationController.initialize([AIRServiceProvider], 
				AIRServiceProvider.ID, File.applicationStorageDirectory.resolvePath("gapdesktoprx-"+version).nativePath);
			//Rx.enableLogging();
		}
		
		public static function get models():ModelsController {
			return ModelsController.instance;
		}
		
		
		protected function exampleSelectEventHandler(event:ExampleSelectEvent):void
		{
			trace (event.example.hash);
			var viewer:GraphViewer = new GraphViewer();
			viewer.example = event.example;
			currentState = 'TlzState';
			navigator.addChildAt(viewer,navigator.numChildren - 1);
			navigator.selectedChild = viewer;
		}
		
		
		protected function fullScreenButton_clickHandler(event:MouseEvent):void
		{
			switch (stage.displayState) {
				case StageDisplayState.FULL_SCREEN:
				case StageDisplayState.FULL_SCREEN_INTERACTIVE:
					stage.displayState = StageDisplayState.NORMAL;
					break;
				case StageDisplayState.NORMAL:
					stage.displayState = StageDisplayState.FULL_SCREEN_INTERACTIVE;
					break;
			}
		}
		
		protected function windowedapplication1_applicationCompleteHandler(event:FlexEvent):void
		{
			stage.addEventListener(FullScreenEvent.FULL_SCREEN,fullScreenStateChange);
			this.addEventListener(ExampleRolloverEvent.EXAMPLE_ROLLOVER,exampleRolloverEventHandler);
			this.addEventListener(ExampleRolloutEvent.EXAMPLE_ROLLOUT,exampleRolloutEventHandler);
			this.addEventListener(ExampleSelectEvent.EXAMPLE_SELECTED,exampleSelectEventHandler); //for selection of default graph
			launchMonitor();
			updater = new ApplicationUpdaterUI(File.applicationDirectory.resolvePath('config/updaterConfig.xml'),false,true);
			
		}
		
		
		protected function navigator_clickHandler(event:MouseEvent):void {
			
			//add tab functionality
			
			var bar:SuperTabBar = null;			
			var obj:Object = event.target;
			var parent:Object = obj.parent;
			var child:DisplayObject = null;
			for (var i:uint=0; i<4; i++) {
				if (parent is SuperTabBar) {
					bar = parent as SuperTabBar;
					child = obj as DisplayObject;
					break;
				}
				obj = parent;
				parent = obj.parent;
				
			}
			if (bar) {
				var selectedIndex:uint = bar.getChildIndex(child);
				if (selectedIndex == (bar.numChildren - 1)) {
					event.stopImmediatePropagation();
					event.preventDefault();
					if (event.target is SuperTab) {
						var viewer:GraphViewer = new GraphViewer();
						viewer.example = models.defaultExample;
						navigator.addChildAt(viewer,navigator.numChildren - 1);
						navigator.selectedChild = viewer;
					}
				}
			}
		}
		
		private function checkForUpdateEventHandler(event:UpdateEvent):void {
			trace ('update check authorized');
		}
		
		private function nameExampleHandler(event:NameExampleEvent):void {
			GraphViewer(navigator.selectedChild).bookmarkExample(event.name);
		}
		
		private function exampleRolloverEventHandler(event:ExampleRolloverEvent):void {	
			currentState="TooltipState";
			exampleDesc.textFlow = TextConverter.importToFlow(event.example.content,TextConverter.TEXT_FIELD_HTML_FORMAT);
			exampleName.textFlow = TextConverter.importToFlow(event.example.name,TextConverter.PLAIN_TEXT_FORMAT);
		}
		
		
		private function exampleRolloutEventHandler(event:ExampleRolloutEvent):void {
			currentState="MainState";	
			exampleDesc.textFlow = null;
			exampleName.textFlow = null;
		}
		
		protected function examplesListCloseEventHandler(event:CloseEvent):void {
			turnOffScreenshotMode();
		}			
		
		protected function nameExampleCloseHandler(event:CloseEvent):void {
			turnOffScreenshotMode();
			
		}
		
		protected function turnOffScreenshotMode():void {
			if(navigator && navigator.selectedChild) {
				GraphViewer(navigator.selectedChild).currentState = '';
			}
		}
		
		private function launchExamplesList():void {
			if (navigator && navigator.selectedChild && navigator.selectedChild is GraphViewer) {
				//var viewer:GraphViewer = navigator.selectedChild as GraphViewer;
				//viewer.currentState = 'ScreenshotState';
			}
			var win:ExampleSelectionBox = PopUpManager.createPopUp(this,ExampleSelectionBox,true) as ExampleSelectionBox;
			win.addEventListener(ExampleSelectEvent.EXAMPLE_SELECTED,exampleSelectEventHandler);
			win.addEventListener(CloseEvent.CLOSE,examplesListCloseEventHandler);
			PopUpManager.centerPopUp(win);
		}
		
		private function launchDefaultGraph():void {
			if (!navigator || navigator.numChildren < 2) {
				this.dispatchEvent(new ExampleSelectEvent( models.defaultExample));
			} else {
				currentState = 'TlzState';
			}
		}
		
		
		protected function bookmarkButton_clickHandler(event:MouseEvent):void
		{	
			/* if (navigator && navigator.selectedChild) {
			var viewer:GraphViewer = navigator.selectedChild as GraphViewer;
			viewer.currentState = 'ScreenshotState';
			}
			*/
			var nameExampleWindow:NameExample = PopUpManager.createPopUp(this,NameExample,true) as NameExample;
			nameExampleWindow.addEventListener(NameExampleEvent.NAME_EXAMPLE,nameExampleHandler);
			nameExampleWindow.addEventListener(CloseEvent.CLOSE,nameExampleCloseHandler);
			PopUpManager.centerPopUp(nameExampleWindow);
			nameExampleWindow.y = this.y;
		}
		
		private function fixedSizeState():Boolean {
			if (this.currentState == "MainState") {
				return true;
			}
			else {
				return false;
			}
		}
		
		protected function windowedapplication1_resizingHandler(event:NativeWindowBoundsEvent):void
		{
			if (this.fixedSizeState()) {
				trace ('now resizing should have been prevented');
			}
		}
		
		
		protected function navigator_indexChangedHandler(event:IndexChangedEvent):void {
			/* 		trace (event.relatedObject.toString());
			var viewer:GraphViewer = event.relatedObject as GraphViewer;
			if (viewer && viewer.graphHTML) {
			this.stage.focus = viewer.graphHTML.htmlLoader; 
			viewer.graphHTML.htmlLoader.window.setFocus();
			}
			*/			
		}
		
		protected function navigator_creationCompleteHandler(event:FlexEvent):void
		{
			SuperTabNavigator(event.currentTarget).addEventListener(MouseEvent.CLICK,navigator_clickHandler,true);
			SuperTabNavigator(event.currentTarget).addEventListener(IndexChangedEvent.CHANGE,navigator_indexChangedHandler);		
		}
		
		protected function navigator_tabsReorderedHandler(event:TabReorderEvent):void
		{
			trace (event.currentTarget.toString());
			var nav:SuperTabNavigator = event.currentTarget as SuperTabNavigator;
			if (event.newIndex == nav.length) {
				event.preventDefault();
			}
		}
		
		
		protected function tosButton_clickHandler(event:MouseEvent):void
		{
			if (event.altKey) { 
				if (event.shiftKey) { //open db admin interface
					var win:Admin = PopUpManager.createPopUp(this,Admin,true) as Admin;
					PopUpManager.centerPopUp(win);
				} else { //open Settings
					currentState = 'SettingsState';
				}
			} else {
				currentState='TosState';
				
			}
		}
		
		protected function addTabCanvas_creationCompleteHandler(event:FlexEvent):void
		{
			var nav:SuperTabNavigator = event.currentTarget.parent as SuperTabNavigator;
			var selectedIndex:uint = nav.getChildIndex(event.currentTarget as DisplayObject);
			nav.setClosePolicyForTab(selectedIndex,SuperTab.CLOSE_NEVER);
		}
		
		protected function resetButton_clickHandler(event:MouseEvent):void
		{
			var viewer:GraphViewer = navigator.selectedChild as GraphViewer;
			if (viewer) {
				this.dispatchEvent(new ExampleSelectEvent( models.defaultExample));
			}
		}
		
		protected function stateInGroup(stateName:String,groupName:String):Boolean {
			for each (var state:State in this.states) {
				if (state.name == stateName) {
					for each (var group:String in state.stateGroups) {
						if (groupName == group) {
							return true;
						}
					}		
				}			
			}
			return false;
		}
		
		protected function windowedapplication1_currentStateChangeHandler(event:StateChangeEvent):void
		{
			if (stateInGroup(event.oldState,"FixedSize")) {
				if (stateInGroup(event.newState,"Resizable")) {
					//transition from fixed to resizable
					this.stage.displayState = resizableDisplayState;
					if (!(resizableDisplayState == StageDisplayState.FULL_SCREEN_INTERACTIVE)) {
						this.move(0,0);
						this.nativeWindow.width = Capabilities.screenResolutionX;
						this.nativeWindow.height = Capabilities.screenResolutionY;
					}
					
				}
			}
			if (stateInGroup(event.oldState,"Resizable")) {
				
				if (stateInGroup(event.newState,"FixedSize")) {
					//transition from resizable to fixed		
					stage.displayState = StageDisplayState.NORMAL;
		/* 			this.width = fixedSizeRect.width;
					this.height = fixedSizeRect.height;
					this.move(fixedSizeRect.x,fixedSizeRect.y); */
					this.nativeWindow.width = fixedSizeRect.width;
					this.nativeWindow.height = fixedSizeRect.height;
					this.nativeWindow.x = fixedSizeRect.x;
					this.nativeWindow.y = fixedSizeRect.y;
				}	
			}
			
		}
		
		
		protected function updateCheckButton_clickHandler(event:MouseEvent):void
		{
			updater.checkNow();
		}
		
		
		protected function windowedapplication1_currentStateChangingHandler(event:StateChangeEvent):void
		{
			if (stateInGroup(event.oldState,"FixedSize")) {
				if (stateInGroup(event.newState,"Resizable")) {
					//transition from fixed to resizable
					fixedSizeRect.x = this.nativeWindow.x;
					fixedSizeRect.y = this.nativeWindow.y;
					fixedSizeRect.width = this.nativeWindow.width;
					fixedSizeRect.height = this.nativeWindow.height;
					
				}
			}
			if (stateInGroup(event.oldState,"Resizable")) {
				
				if (stateInGroup(event.newState,"FixedSize")) {
					//transition from resizable to fixed	
					resizableDisplayState = this.stage.displayState;
					resizableRect.x = this.nativeWindow.x;
					resizableRect.y = this.nativeWindow.y;
					resizableRect.width = this.nativeWindow.width;
					resizableRect.height = this.nativeWindow.height;
				}	
			}
			
		}
		
		private function launchMonitor():void {
			var monitor:URLMonitor;
			monitor = new URLMonitor(new URLRequest('http://www.gapminder.org'));
			monitor.addEventListener(StatusEvent.STATUS, networkStatusChangeHandler);
			monitor.start();
		}

		protected function windowedapplication1_networkChangeHandler(event:Event):void
		{
			launchMonitor();			
		}
		
		private function networkStatusChangeHandler(event:StatusEvent):void {
			online = (event.code == "Service.available"); 
		}

	]]></fx:Script>
	<s:states>
		<s:State name="MainState" stateGroups="FixedSize"/>
		<s:State name="SettingsState" stateGroups="FixedSize"/>
		<s:State name="TooltipState" stateGroups="FixedSize"/>
		<s:State name="TosState" stateGroups="FixedSize"/>
		<s:State name="TlzState" stateGroups="Resizable"/>
	</s:states>
	<s:DataGroup dataProvider="{models.examples}" width="0" height="0"/>
	<s:Group id="tlzgroup" x="0" y="0" width="100%" height="100%" includeIn="TlzState">
		<s:layout>
			<s:BasicLayout/>
		</s:layout>
		<s:Group id="tlzbuttonrow" x="0" y="0" height="30" width="100%">
			<s:layout><s:HorizontalLayout paddingLeft="4" paddingTop="4" paddingBottom="4" paddingRight="4"/></s:layout>
			<extensions:IconButton id="homeButton" styleName="iconButtonStyle" label="" iconUp="assets/icons/button/home.png" click="currentState='MainState'" />
			<extensions:IconButton id="resetButton" styleName="iconButtonStyle" label="Reset graph" iconUp="assets/icons/button/reload.png" click="resetButton_clickHandler(event)" />
			<extensions:IconButton id="tlzGraphListButton" styleName="iconButtonStyle" label="Open list of graphs" iconUp="assets/icons/button/list.png" click="launchExamplesList()"/>
			<extensions:IconButton id="bookmarkButton" styleName="iconButtonStyle" label="Bookmark this graph" iconUp="assets/icons/button/plus.png" click="bookmarkButton_clickHandler(event)"/>
			<s:Group id="tlzbuttonrowright" width="100%">
				<s:layout>
					<s:HorizontalLayout horizontalAlign="right"/>
				</s:layout>
			<extensions:IconButton id="fullScreenButton" styleName="iconButtonStyle" label="Full screen" iconUp="assets/icons/button/fullscreen.png" click="fullScreenButton_clickHandler(event)"/>
				
			</s:Group>
		</s:Group>
		
		<containers:SuperTabNavigator styleName="tlzNavigator" id="navigator" bottom="0" top="40" left="0" right="0"  creationPolicy="all" editableTabLabels="false" popUpButtonPolicy="off" creationComplete="navigator_creationCompleteHandler(event)" tabsReordered="navigator_tabsReorderedHandler(event)">
			<ns:Canvas id="addTabCanvas" width="100%" height="100%" label="+" creationComplete="addTabCanvas_creationCompleteHandler(event)"/>
		</containers:SuperTabNavigator>
		
		
		
		
	</s:Group>
	<s:Group id="maingroup" width="100%" x="0" height="100%">
		<s:layout>
			<s:VerticalLayout gap="10"/>
		</s:layout>
		
		<s:Group id="headinggroup" excludeFrom="TlzState">
			<s:Rect height="74" width="100%" x="0" y="0">
				<s:fill>
					<s:LinearGradient rotation="270" scaleX="74" x="327.5" y="74">
						<s:GradientEntry color="0xD9D9D9" flm:midpoint="0.208790988922119" ratio="0"/>
						<s:GradientEntry color="0xEFEFEF" flm:midpoint="0.694443969726563" ratio="0.564417"/>
						<s:GradientEntry color="0xEEEEEE" ratio="1"/>
					</s:LinearGradient>
				</s:fill>
			</s:Rect>
			<s:Line x="0" xTo="{this.width}" y="74.5">
				<s:stroke>
					<s:SolidColorStroke caps="none" color="0x6C6C6C" joints="miter" miterLimit="4" scaleMode="normal" weight="1"/>
				</s:stroke>
			</s:Line>
			<s:RichText color="#000000" fontFamily="Avenir-black" fontWeight="normal" fontSize="36" kerning="on" textAlign="center" whiteSpaceCollapse="preserve" left="0" right="0" x="0" y="14">
				<s:content><s:p>Gapminder <s:span fontFamily="Avenir-light">Desktop</s:span></s:p></s:content>
			</s:RichText>
			
			<s:RichText color="#444444" rotation="45" fontFamily="Avenir-light" fontWeight="normal" fontSize="14" kerning="on" textAlign="center" whiteSpaceCollapse="preserve" x="520" y="5" text="beta"/>
			
			<s:RichText color="0x000000" fontFamily="Avenir-book" fontSize="14" height="20" kerning="on" lineHeight="120%" textAlign="center" whiteSpaceCollapse="preserve" width="{this.width}" x="0" y="49">
				<s:content><s:p whiteSpaceCollapse="collapse"><s:span>no internet required</s:span></s:p></s:content>
			</s:RichText>
			<s:RichText color="#000000" fontFamily="Avenir-light" fontSize="10" height="10" text="Updated {new Date().toLocaleDateString()} (v 1.0b11_internal)" textAlign="right" whiteSpaceCollapse="preserve" width="{this.width/3}" x="{this.width*(2/3)-5}" y="60"/>
		</s:Group>
		
		<s:Group id="gwgroup" width="100%" x="0" excludeFrom="SettingsState,TlzState,TosState">	
			<s:layout>
				<s:HorizontalLayout gap="20" paddingLeft="10"/>
			</s:layout>
			<s:Group id="bigbuttoncolumn" width="50%">
				<s:Group id="bigbuttongroup">
					<s:Button id="splashButton" styleName="splashButtonStyle" click="launchDefaultGraph()" useHandCursor="true" buttonMode="true"/>		
				</s:Group>
			</s:Group>
			<s:Group id="explanationcolumn" width="350" excludeFrom="SettingsState,TosState,TlzState" alpha.TooltipState="0.4">
				<s:layout><s:VerticalLayout/></s:layout>
				<s:Group id="introtextgroup" excludeFrom="SettingsState,TosState,TlzState" width="100%">
					<s:layout><s:VerticalLayout gap="0"/></s:layout>
					<s:RichText alpha.TooltipState="0.4" color="0x000000" fontFamily="Avenir-heavy" fontSize="17" id="explanationheading" kerning="on" lineHeight="120%" whiteSpaceCollapse="preserve" width="100%" paragraphSpaceAfter="0" paragraphSpaceBefore="0" text="Gapminder World"/>
					
					<s:RichText alpha.TooltipState="0.4" textAlign="justify" color="0x000000" fontSize="14" fontFamily="Avenir-book" id="explanationtext" lineBreak="toFit" kerning="on" lineHeight="120%" width="200" whiteSpaceCollapse="preserve" paddingTop="5" paddingBottom="5">
						<s:content><s:p >Brings all of the data from <s:a href="http://www.gapminder.org/">gapminder.org</s:a> to your computer. Features include:</s:p></s:content>
					</s:RichText>
					<s:RichText alpha.TooltipState="0.4" color="0x000000" fontSize="14" fontFamily="Avenir-book" id="explanationbullets" lineBreak="toFit" kerning="on" lineHeight="120%" width="200" tabStops="S0 S15" whiteSpaceCollapse="preserve" paragraphStartIndent="15" textIndent="-15" paragraphSpaceAfter="3">
						<s:content><s:p>\u2022	No internet required</s:p><s:p>\u2022	Bookmark your own graphs</s:p><s:p>\u2022	Choose from a library of existing graphs</s:p><s:p>\u2022	Updates automatically when new data are available</s:p></s:content>
					</s:RichText>
				</s:Group>
				<extensions:IconButton id="mainGwButton" styleName="iconButtonStyle" useHandCursor="true" buttonMode="true" iconUp="assets/icons/button/gw.png" label="Open Gapminder World" width="220" click="launchDefaultGraph()"/>
				<extensions:IconButton styleName="iconButtonStyle" useHandCursor="true" buttonMode="true" label="Open list of graphs" width="220" click="launchExamplesList()" iconUp="assets/icons/button/list.png"/>
				<s:Group id="settingsbuttonsgroup" excludeFrom="SettingsState,TosState,TlzState" width="100%" height="40">
					<s:layout><s:HorizontalLayout paddingLeft="12"/></s:layout>
					<s:Button id="tosButton" click="tosButton_clickHandler(event)" styleName="settingsButtonStyle" label="About..."/>
					<s:Button id="updateCheckButton" click="updateCheckButton_clickHandler(event)" styleName="settingsButtonStyle" label="Check for updates..."/>
				</s:Group>
			</s:Group>
		</s:Group>
		
		<s:Group id="tosgroup" includeIn="TosState" >
			<s:layout><s:VerticalLayout paddingLeft="10"/></s:layout>
			<main:TermsofUse x="10" y="0" width="680" height="280"/>
			<s:Button id="closeTosButton" click="closeSettingsButton_clickHandler()" label="Close" skinClass="gapdesktoprx.components.catalyst.MainButton"/>		
		</s:Group>
		
		<s:Group id="settingsgroup" includeIn="SettingsState" x="100">
			<s:CheckBox id="checkbox2" label="Check for updates automatically" skinClass="gapdesktoprx.components.catalyst.Checkbox1" x="26" y="114"/>
			<s:Button id="button2" label="Check for updates now…" skinClass="gapdesktoprx.components.catalyst.Button3" x="26" y="143"/>
			<s:Button id="button0" label="Restore default graphs…" skinClass="gapdesktoprx.components.catalyst.Button3" x="25" y="186"/>
			<s:Button id="closeSettingsButton" click="closeSettingsButton_clickHandler()" label="Close settings" label.TosState="Close" skinClass="gapdesktoprx.components.catalyst.Button3" x="26" y="232"/>
		</s:Group>
		
		
		
	</s:Group>
	
	<s:Group id="tooltip" includeIn="TooltipState" x="100" y="10" width="255" height="{parentApplication.height - 20}">
		<s:layout><s:BasicLayout/></s:layout>
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:LinearGradient x="178.5" y="374.803" scaleX="374.302" rotation="-90">
					<s:GradientEntry color="#f3f3f3" ratio="0"/>
					<s:GradientEntry color="#ffffff" ratio="0.564417"/>
					<s:GradientEntry color="#f3f3f3" ratio="1"/>
				</s:LinearGradient>
			</s:fill>
			<s:stroke>
				<s:SolidColorStroke color="#FFFFFF" weight="2" miterLimit="128" alpha="0.5"/>
				
				
			</s:stroke>
			<s:filters>
				<s:DropShadowFilter alpha="0.75" blurX="10" blurY="10" distance="10" quality="3"/>
			</s:filters>
		</s:Rect>
		<s:RichText id="exampleName" top="10" left="15" height="20" right="15" kerning="on" fontSize="14" textAlign="left"/>
		<s:Line left="15" right="15" y="25">
			<s:stroke>
				<s:SolidColorStroke color="#888888" weight="1"/>
			</s:stroke>
		</s:Line>
		<s:RichText id="exampleDesc" top="30" left="15" bottom="15" right="15" kerning="on" fontSize="14" textAlign="justify" textAlignLast="justify"/>
	</s:Group>		
	
	
	
	<s:transitions>
		<s:Transition autoReverse="true" fromState="MainState" toState="TooltipState">
			<s:Parallel>
				<s:Parallel target="{explanationtext}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{splashButton}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{tooltip}">
					<s:Fade duration="500"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="TooltipState" toState="MainState">
			<s:Parallel>
				<s:Parallel target="{splashButton}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{explanationtext}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{tooltip}">
					<s:Fade duration="500"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="MainState" toState="TosState">
			<s:Parallel>
				<s:Parallel target="{bigbuttongroup}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{closeSettingsButton}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{explanationcolumn}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{settingsbuttonsgroup}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{introtextgroup}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{splashButton}">
					<s:Fade duration="500"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="TosState" toState="MainState">
			<s:Parallel>
				<s:Parallel target="{bigbuttongroup}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{explanationcolumn}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{settingsbuttonsgroup}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{introtextgroup}">
					<s:Fade duration="500"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition autoReverse="true" fromState="SettingsState" toState="MainState">
			<s:Parallel>
				<s:Parallel target="{bigbuttongroup}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{checkbox2}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{button2}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{button0}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{closeSettingsButton}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{explanationcolumn}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{settingsbuttonsgroup}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{introtextgroup}">
					<s:Fade duration="0"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition fromState="MainState" toState="TlzState" autoReverse="true">
			<s:Parallel>
				<s:Parallel target="{headinggroup}">					
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{maingroup}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{tlzgroup}">
					<s:Fade duration="500"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition fromState="TlzState" toState="MainState" autoReverse="true">
			<s:Parallel>
				<s:Parallel target="{headinggroup}">					
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{maingroup}">
					<s:Fade duration="500"/>
				</s:Parallel>
				<s:Parallel target="{tlzgroup}">
					<s:Fade duration="500"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
		<s:Transition fromState="TosState" toState="TooltipState" autoReverse="true">
			<s:Parallel>
				<s:Parallel target="{bigbuttongroup}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{closeSettingsButton}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{explanationcolumn}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{settingsbuttonsgroup}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{introtextgroup}">
					<s:Fade duration="0"/>
				</s:Parallel>
				<s:Parallel target="{tooltip}">
					<s:Fade duration="0"/>
				</s:Parallel>
			</s:Parallel>
		</s:Transition>
	</s:transitions>
</s:WindowedApplication>
